import streamlit as st
import pandas as pd
import google.generativeai as genai
from datetime import datetime
import os
from dotenv import load_dotenv
import hashlib
from google.cloud import bigquery
from google.cloud import storage
from google.oauth2 import service_account

# ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Service Account Key
service_account_file = "/workspaces/HR-CHAT-DASHBOARD/test-pipeline-company-28dd6b58ec57.json"
credentials = service_account.Credentials.from_service_account_file(service_account_file)
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "/workspaces/HR-CHAT-DASHBOARD/test-pipeline-company-28dd6b58ec57.json"
## ‡∏™‡∏£‡πâ‡∏≤‡∏á BigQuery Client
bigquery_client = bigquery.Client(credentials=credentials, project="test-pipeline-company")
# ‡∏™‡∏£‡πâ‡∏≤‡∏á Google Cloud Storage Client
storage_client = storage.Client(credentials=credentials, project="test-pipeline-company")
# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Google Cloud Storage
bucket_name = "workwork_bucket"
bucket = storage_client.bucket(bucket_name)  # This is the correct method for Storage Client
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ bucket ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà


query = "SELECT * FROM `your-project-id.your-dataset-id.your-table-id`"
results = bigquery_client.query(query)
# ‡πÇ‡∏´‡∏•‡∏î API Key ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
project_id = "test-pipeline-company"
bucket_name = "workwork_bucket"
dataset_id = "wh_work"  # Dataset ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
client = bigquery.Client(credentials=credentials, project="test-pipeline-company")

genai.configure(api_key=GOOGLE_API_KEY)
def load_hr_data_from_bigquery():
    try:
        tables = list(bigquery_client.list_tables(dataset_id))  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if not tables:
            st.warning(f"Dataset '{dataset_id}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏î‡πÜ")
            return
        
        #st.write(f"‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô Dataset '{dataset_id}':")  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        #for table in tables:
        #   st.write(f"- {table.table_id}")  # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á

        st.session_state.hr_data = {}
        context_data = []
        for table in tables:
            table_name = table.table_id
            query = f"SELECT * FROM `{project_id}.{dataset_id}.{table_name}`"
            df = bigquery_client.query(query).to_dataframe()
            st.session_state.hr_data[table_name] = df
            context_data.append(f"Table: {table_name}\n{df.head().to_string(index=False)}")
            
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chatbot
        st.session_state.context = "\n\n".join(context_data)  # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        st.success("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HR ‡∏à‡∏≤‡∏Å BigQuery ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return st.session_state.hr_data
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å BigQuery: {str(e)}")
        return None
  


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
def display_all_data():
    st.title("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å BigQuery")
    if "hr_data" not in st.session_state:
        load_hr_data_from_bigquery()
    if st.session_state.hr_data:
        for table_name, df in st.session_state.hr_data.items():
            st.dataframe(df)  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô DataFrame
            

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Feedback ‡∏•‡∏á BigQuery
def save_feedback_bigquery(feedback, sprint_id, feedback_type="general"):
    try:
        client = bigquery.Client(project=project_id)  # ‡πÉ‡∏ä‡πâ project_id
        table_id = f"{project_id}.your_dataset.feedback_table"  # ‡πÉ‡∏ä‡πâ project_id
        rows_to_insert = [{
            "Employee_ID": st.session_state.employee_id,
            "Sprint_ID": sprint_id,
            "Feedback": feedback,
            "Timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            "Feedback_Type": feedback_type
        }]
        errors = client.insert_rows_json(table_id, rows_to_insert)
        if errors:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Feedback: {errors}")
        else:
            st.success("Feedback ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á BigQuery ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")










# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
def login_page():
    st.title("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    employee_id = st.text_input("Employee ID")
    username = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
    if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
        user_database = {
            "101": {"username": "admin", "password": hashlib.sha256("password123".encode()).hexdigest(), "role": "HR"},
            "102": {"username": "user1", "password": hashlib.sha256("user123".encode()).hexdigest(), "role": "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"}
        }
        if employee_id in user_database:
            user = user_database[employee_id]
            if username == user["username"] and hashlib.sha256(password.encode()).hexdigest() == user["password"]:
                st.session_state.logged_in = True
                st.session_state.employee_id = employee_id
                st.session_state.username = username
                st.session_state.role = user["role"]
                st.rerun()
            else:
                st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö Employee ID ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
def save_feedback_rating(feedback_scores):
    try:
        feedback_data = pd.read_csv('feedback_data_page.csv')  # Load existing feedback data
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        # Create new feedback entry
        new_feedback = pd.DataFrame([{
            'Employee_ID': st.session_state.employee_id,
            'Feedback_Type': "Sprint Feedback",
            'Colleague_Rating': feedback_scores['colleague'],
            'Process_Rating': feedback_scores['process'],
            'Task_Rating': feedback_scores['task'],
            'WorkLifeBalance_Rating': feedback_scores['work_life_balance'],
            'Environment_Rating': feedback_scores['work_environment'],
            'Timestamp': timestamp
        }])
        
        # Append new feedback to existing data
        feedback_data = pd.concat([feedback_data, new_feedback], ignore_index=True)
        feedback_data.to_csv('feedback_data_page.csv', index=False)
        st.success("Feedback ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Feedback: {str(e)}")
def show_all_data_for_hr():
    st.title("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å BigQuery")
    if "hr_data" not in st.session_state or not st.session_state.hr_data:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å BigQuery")
        load_hr_data_from_bigquery()  # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    if st.session_state.hr_data:
        for table_name, df in st.session_state.hr_data.items():
            st.subheader(f"üîç ‡∏ï‡∏≤‡∏£‡∏≤‡∏á: {table_name}")
            st.dataframe(df)  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô DataFrame
            st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(df)}")
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á")

def feedback_tab():
    st.header("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ Feedback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sprint ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤")
    
    # Sprint ID dropdown
    sprint_id = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sprint ID",
        options=["001", "002", "003", "004", "005"],
        key="sprint_id"
    )
    
    # Define feedback questions
    feedback_questions = {
        "colleague": "‡πÉ‡∏ô sprint ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô? (1 ‡∏ô‡πâ‡∏≠‡∏¢ - 5 ‡∏°‡∏≤‡∏Å)",
        "process": "‡πÉ‡∏ô sprint ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô? (1 ‡∏ô‡πâ‡∏≠‡∏¢ - 5 ‡∏°‡∏≤‡∏Å)",
        "task": "‡πÉ‡∏ô sprint ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô? (1 ‡∏ô‡πâ‡∏≠‡∏¢ - 5 ‡∏°‡∏≤‡∏Å)",
        "work_life_balance": "‡πÉ‡∏ô sprint ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏±‡∏ö work-life balance ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô? (1 ‡∏ô‡πâ‡∏≠‡∏¢ - 5 ‡∏°‡∏≤‡∏Å)",
        "work_environment": "‡πÉ‡∏ô sprint ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô? (1 ‡∏ô‡πâ‡∏≠‡∏¢ - 5 ‡∏°‡∏≤‡∏Å)"
    }
    
    # Collect ratings
    feedback_scores = {}
    for key, question in feedback_questions.items():
        st.write(question)
        feedback_scores[key] = st.radio(
            label=f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {key}",
            options=[1, 2, 3, 4, 5],
            horizontal=True,
            key=f"rating_{key}"
        )
    
    # Free text feedback
    feedback_comment = st.text_area("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)")
    
    # Submit button
    if st.button("‡∏™‡πà‡∏á Feedback"):
        save_feedback_rating(feedback_scores)  # Save rating-based feedback
        if feedback_comment:
            save_feedback(feedback_comment, sprint_id, feedback_type="comment")  # Save free-text feedback




def chatbot_response(prompt):
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ context ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HR ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if "context" not in st.session_state or not st.session_state.context:
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HR ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô"

        context = st.session_state.context  # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HR ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        full_prompt = f"""
        ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô HR Analyst ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô 
        ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö HR:

        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ:
        {context}

        ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {prompt}

        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÇ‡∏î‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏á‡πà‡∏°‡∏∏‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        """

        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        model = genai.GenerativeModel('gemini-pro')
        response = model.generate_content(full_prompt)
        response_text = response.text.strip()

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        save_to_chat_history(prompt, response_text)

        return response_text
    
    except Exception as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {str(e)}"


def save_to_chat_history(prompt, response):
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    # ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
    st.session_state.chat_history.append({"prompt": prompt, "response": response})


def display_chat_history():
    if "chat_history" in st.session_state and st.session_state.chat_history:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô (‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î)
        for entry in st.session_state.chat_history:
            with st.chat_message("user"):
                st.write(entry['prompt'])
            with st.chat_message("assistant"):
                st.write(entry['response'])






def main():
    if "logged_in" not in st.session_state:
        st.session_state.logged_in = False
    if "hr_data" not in st.session_state:
        load_hr_data_from_bigquery()

    if "context" not in st.session_state or not st.session_state.context:
        load_hr_data_from_bigquery()  # ‡πÇ‡∏´‡∏•‡∏î context ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ

    if not st.session_state.logged_in:
        login_page()
    else:
        st.title("üìä HR Analytics Dashboard")
        with st.sidebar:
            st.header(f"Welcome, {st.session_state.username}")
            st.write(f"‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {st.session_state.role}")
            if st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
                st.session_state.clear()
                st.success("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                st.rerun()
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if st.session_state.role == "HR":
                page = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠", ["‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"])
                if page == "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                    show_all_data_for_hr()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô

        if st.session_state.role == "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô":
            feedback_tab()  # ‡πÉ‡∏ä‡πâ Feedback Tab ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á

        elif st.session_state.role == "HR":
            if prompt := st.chat_input("‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HR..."):
                response = chatbot_response(prompt)
                
                    
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
            display_chat_history()


if __name__ == "__main__":
    main()
